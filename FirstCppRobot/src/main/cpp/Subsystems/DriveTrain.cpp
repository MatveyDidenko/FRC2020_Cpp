// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Subsystems/DriveTrain.h"
#include "ctre/phoenix/motorcontrol/ControlMode.h"
#include "Constants.h"

using ControlMode=ctre::phoenix::motorcontrol::ControlMode;

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {

    std::cout << "DriveTrain constructer" << std::endl;

    left1.reset(new WPI_TalonSRX(constants::MOTOR_LEFT1_ID));
    left2.reset(new WPI_TalonSRX(constants::MOTOR_LEFT2_ID));
    right1.reset(new WPI_TalonSRX(constants::MOTOR_RIGHT1_ID));
    right2.reset(new WPI_TalonSRX(constants::MOTOR_RIGHT2_ID));
    
    left2->Set(ControlMode::Follower, constants::MOTOR_LEFT1_ID);
    right2->Set(ControlMode::Follower, constants::MOTOR_RIGHT1_ID);
    
    left1->SetInverted(true);
    left2->SetInverted(true);
    //right1->SetInverted(true);
    //right2->SetInverted(false);

    m_left.reset(new frc::SpeedControllerGroup(*left1.get(), *left2.get()));
    m_right.reset(new frc::SpeedControllerGroup(*right1.get(), *right2.get()));

    driveTrain.reset(new frc::DifferentialDrive(*m_left.get(), *m_right.get()));
}

void DriveTrain::Drive(double speedLeft, double speedRight)
{   
    //std::cout << "Drive: Speed [ " << speedLeft << " : " << speedRight << " ]" <<  std::endl;
    driveTrain->TankDrive(speedLeft, speedRight);
}

void DriveTrain::InitDefaultCommand() {

}

void DriveTrain::Periodic() {
    // Put code here to be run every loop
    
}


